/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 115.0, "minX": 0.0, "maxY": 3271.0, "series": [{"data": [[0.0, 115.0], [0.1, 223.0], [0.2, 232.0], [0.3, 249.0], [0.4, 262.0], [0.5, 273.0], [0.6, 287.0], [0.7, 300.0], [0.8, 312.0], [0.9, 326.0], [1.0, 330.0], [1.1, 344.0], [1.2, 358.0], [1.3, 364.0], [1.4, 375.0], [1.5, 391.0], [1.6, 402.0], [1.7, 412.0], [1.8, 419.0], [1.9, 427.0], [2.0, 433.0], [2.1, 441.0], [2.2, 459.0], [2.3, 461.0], [2.4, 471.0], [2.5, 477.0], [2.6, 482.0], [2.7, 490.0], [2.8, 503.0], [2.9, 505.0], [3.0, 515.0], [3.1, 521.0], [3.2, 528.0], [3.3, 535.0], [3.4, 536.0], [3.5, 538.0], [3.6, 545.0], [3.7, 548.0], [3.8, 550.0], [3.9, 552.0], [4.0, 555.0], [4.1, 556.0], [4.2, 558.0], [4.3, 569.0], [4.4, 576.0], [4.5, 576.0], [4.6, 577.0], [4.7, 581.0], [4.8, 582.0], [4.9, 586.0], [5.0, 589.0], [5.1, 593.0], [5.2, 594.0], [5.3, 597.0], [5.4, 600.0], [5.5, 605.0], [5.6, 605.0], [5.7, 610.0], [5.8, 615.0], [5.9, 618.0], [6.0, 620.0], [6.1, 634.0], [6.2, 644.0], [6.3, 647.0], [6.4, 650.0], [6.5, 654.0], [6.6, 658.0], [6.7, 662.0], [6.8, 665.0], [6.9, 668.0], [7.0, 672.0], [7.1, 677.0], [7.2, 680.0], [7.3, 687.0], [7.4, 688.0], [7.5, 691.0], [7.6, 695.0], [7.7, 699.0], [7.8, 701.0], [7.9, 703.0], [8.0, 706.0], [8.1, 709.0], [8.2, 711.0], [8.3, 714.0], [8.4, 719.0], [8.5, 724.0], [8.6, 725.0], [8.7, 727.0], [8.8, 730.0], [8.9, 738.0], [9.0, 739.0], [9.1, 760.0], [9.2, 769.0], [9.3, 787.0], [9.4, 794.0], [9.5, 809.0], [9.6, 826.0], [9.7, 828.0], [9.8, 830.0], [9.9, 835.0], [10.0, 848.0], [10.1, 849.0], [10.2, 854.0], [10.3, 856.0], [10.4, 860.0], [10.5, 863.0], [10.6, 871.0], [10.7, 880.0], [10.8, 883.0], [10.9, 887.0], [11.0, 892.0], [11.1, 898.0], [11.2, 900.0], [11.3, 901.0], [11.4, 906.0], [11.5, 911.0], [11.6, 918.0], [11.7, 924.0], [11.8, 926.0], [11.9, 929.0], [12.0, 938.0], [12.1, 938.0], [12.2, 946.0], [12.3, 949.0], [12.4, 949.0], [12.5, 955.0], [12.6, 959.0], [12.7, 963.0], [12.8, 969.0], [12.9, 971.0], [13.0, 973.0], [13.1, 977.0], [13.2, 987.0], [13.3, 991.0], [13.4, 992.0], [13.5, 994.0], [13.6, 1000.0], [13.7, 1005.0], [13.8, 1023.0], [13.9, 1024.0], [14.0, 1028.0], [14.1, 1030.0], [14.2, 1032.0], [14.3, 1041.0], [14.4, 1046.0], [14.5, 1048.0], [14.6, 1050.0], [14.7, 1056.0], [14.8, 1060.0], [14.9, 1063.0], [15.0, 1070.0], [15.1, 1072.0], [15.2, 1080.0], [15.3, 1084.0], [15.4, 1087.0], [15.5, 1093.0], [15.6, 1094.0], [15.7, 1102.0], [15.8, 1108.0], [15.9, 1121.0], [16.0, 1124.0], [16.1, 1133.0], [16.2, 1144.0], [16.3, 1148.0], [16.4, 1150.0], [16.5, 1157.0], [16.6, 1166.0], [16.7, 1168.0], [16.8, 1175.0], [16.9, 1178.0], [17.0, 1184.0], [17.1, 1193.0], [17.2, 1195.0], [17.3, 1201.0], [17.4, 1208.0], [17.5, 1211.0], [17.6, 1216.0], [17.7, 1218.0], [17.8, 1220.0], [17.9, 1232.0], [18.0, 1233.0], [18.1, 1236.0], [18.2, 1239.0], [18.3, 1249.0], [18.4, 1256.0], [18.5, 1261.0], [18.6, 1270.0], [18.7, 1271.0], [18.8, 1274.0], [18.9, 1284.0], [19.0, 1293.0], [19.1, 1299.0], [19.2, 1300.0], [19.3, 1303.0], [19.4, 1307.0], [19.5, 1314.0], [19.6, 1317.0], [19.7, 1322.0], [19.8, 1326.0], [19.9, 1336.0], [20.0, 1349.0], [20.1, 1352.0], [20.2, 1355.0], [20.3, 1369.0], [20.4, 1371.0], [20.5, 1378.0], [20.6, 1386.0], [20.7, 1394.0], [20.8, 1398.0], [20.9, 1399.0], [21.0, 1407.0], [21.1, 1421.0], [21.2, 1425.0], [21.3, 1431.0], [21.4, 1433.0], [21.5, 1438.0], [21.6, 1442.0], [21.7, 1454.0], [21.8, 1457.0], [21.9, 1461.0], [22.0, 1463.0], [22.1, 1465.0], [22.2, 1468.0], [22.3, 1470.0], [22.4, 1472.0], [22.5, 1486.0], [22.6, 1489.0], [22.7, 1493.0], [22.8, 1498.0], [22.9, 1506.0], [23.0, 1519.0], [23.1, 1520.0], [23.2, 1522.0], [23.3, 1528.0], [23.4, 1534.0], [23.5, 1537.0], [23.6, 1547.0], [23.7, 1549.0], [23.8, 1551.0], [23.9, 1552.0], [24.0, 1556.0], [24.1, 1559.0], [24.2, 1560.0], [24.3, 1562.0], [24.4, 1564.0], [24.5, 1565.0], [24.6, 1566.0], [24.7, 1569.0], [24.8, 1570.0], [24.9, 1572.0], [25.0, 1573.0], [25.1, 1575.0], [25.2, 1577.0], [25.3, 1578.0], [25.4, 1581.0], [25.5, 1584.0], [25.6, 1585.0], [25.7, 1586.0], [25.8, 1590.0], [25.9, 1593.0], [26.0, 1594.0], [26.1, 1595.0], [26.2, 1595.0], [26.3, 1598.0], [26.4, 1600.0], [26.5, 1602.0], [26.6, 1603.0], [26.7, 1607.0], [26.8, 1607.0], [26.9, 1609.0], [27.0, 1609.0], [27.1, 1611.0], [27.2, 1612.0], [27.3, 1613.0], [27.4, 1615.0], [27.5, 1616.0], [27.6, 1618.0], [27.7, 1623.0], [27.8, 1625.0], [27.9, 1627.0], [28.0, 1631.0], [28.1, 1632.0], [28.2, 1632.0], [28.3, 1634.0], [28.4, 1635.0], [28.5, 1641.0], [28.6, 1643.0], [28.7, 1644.0], [28.8, 1646.0], [28.9, 1648.0], [29.0, 1650.0], [29.1, 1652.0], [29.2, 1656.0], [29.3, 1661.0], [29.4, 1662.0], [29.5, 1663.0], [29.6, 1667.0], [29.7, 1672.0], [29.8, 1673.0], [29.9, 1676.0], [30.0, 1679.0], [30.1, 1683.0], [30.2, 1684.0], [30.3, 1685.0], [30.4, 1686.0], [30.5, 1691.0], [30.6, 1695.0], [30.7, 1696.0], [30.8, 1696.0], [30.9, 1697.0], [31.0, 1704.0], [31.1, 1708.0], [31.2, 1708.0], [31.3, 1709.0], [31.4, 1712.0], [31.5, 1717.0], [31.6, 1721.0], [31.7, 1729.0], [31.8, 1730.0], [31.9, 1730.0], [32.0, 1732.0], [32.1, 1735.0], [32.2, 1739.0], [32.3, 1744.0], [32.4, 1748.0], [32.5, 1751.0], [32.6, 1752.0], [32.7, 1753.0], [32.8, 1757.0], [32.9, 1759.0], [33.0, 1761.0], [33.1, 1762.0], [33.2, 1764.0], [33.3, 1767.0], [33.4, 1768.0], [33.5, 1769.0], [33.6, 1782.0], [33.7, 1783.0], [33.8, 1786.0], [33.9, 1787.0], [34.0, 1788.0], [34.1, 1789.0], [34.2, 1792.0], [34.3, 1796.0], [34.4, 1796.0], [34.5, 1797.0], [34.6, 1799.0], [34.7, 1800.0], [34.8, 1801.0], [34.9, 1802.0], [35.0, 1803.0], [35.1, 1804.0], [35.2, 1807.0], [35.3, 1809.0], [35.4, 1811.0], [35.5, 1813.0], [35.6, 1814.0], [35.7, 1815.0], [35.8, 1816.0], [35.9, 1816.0], [36.0, 1817.0], [36.1, 1818.0], [36.2, 1820.0], [36.3, 1822.0], [36.4, 1822.0], [36.5, 1825.0], [36.6, 1826.0], [36.7, 1827.0], [36.8, 1827.0], [36.9, 1828.0], [37.0, 1832.0], [37.1, 1834.0], [37.2, 1837.0], [37.3, 1838.0], [37.4, 1840.0], [37.5, 1840.0], [37.6, 1843.0], [37.7, 1846.0], [37.8, 1846.0], [37.9, 1847.0], [38.0, 1848.0], [38.1, 1851.0], [38.2, 1854.0], [38.3, 1855.0], [38.4, 1857.0], [38.5, 1863.0], [38.6, 1864.0], [38.7, 1865.0], [38.8, 1865.0], [38.9, 1867.0], [39.0, 1868.0], [39.1, 1871.0], [39.2, 1872.0], [39.3, 1874.0], [39.4, 1875.0], [39.5, 1879.0], [39.6, 1881.0], [39.7, 1883.0], [39.8, 1888.0], [39.9, 1888.0], [40.0, 1890.0], [40.1, 1894.0], [40.2, 1895.0], [40.3, 1897.0], [40.4, 1900.0], [40.5, 1901.0], [40.6, 1905.0], [40.7, 1906.0], [40.8, 1907.0], [40.9, 1911.0], [41.0, 1917.0], [41.1, 1918.0], [41.2, 1919.0], [41.3, 1922.0], [41.4, 1924.0], [41.5, 1926.0], [41.6, 1930.0], [41.7, 1931.0], [41.8, 1935.0], [41.9, 1936.0], [42.0, 1938.0], [42.1, 1938.0], [42.2, 1940.0], [42.3, 1942.0], [42.4, 1944.0], [42.5, 1948.0], [42.6, 1949.0], [42.7, 1949.0], [42.8, 1952.0], [42.9, 1952.0], [43.0, 1955.0], [43.1, 1957.0], [43.2, 1958.0], [43.3, 1959.0], [43.4, 1960.0], [43.5, 1962.0], [43.6, 1962.0], [43.7, 1964.0], [43.8, 1964.0], [43.9, 1966.0], [44.0, 1967.0], [44.1, 1967.0], [44.2, 1969.0], [44.3, 1969.0], [44.4, 1969.0], [44.5, 1973.0], [44.6, 1974.0], [44.7, 1975.0], [44.8, 1975.0], [44.9, 1979.0], [45.0, 1980.0], [45.1, 1981.0], [45.2, 1984.0], [45.3, 1984.0], [45.4, 1986.0], [45.5, 1988.0], [45.6, 1989.0], [45.7, 1990.0], [45.8, 1993.0], [45.9, 1997.0], [46.0, 1997.0], [46.1, 1998.0], [46.2, 1999.0], [46.3, 2003.0], [46.4, 2004.0], [46.5, 2007.0], [46.6, 2010.0], [46.7, 2012.0], [46.8, 2013.0], [46.9, 2015.0], [47.0, 2016.0], [47.1, 2017.0], [47.2, 2020.0], [47.3, 2021.0], [47.4, 2021.0], [47.5, 2022.0], [47.6, 2025.0], [47.7, 2027.0], [47.8, 2029.0], [47.9, 2031.0], [48.0, 2032.0], [48.1, 2033.0], [48.2, 2035.0], [48.3, 2037.0], [48.4, 2038.0], [48.5, 2038.0], [48.6, 2039.0], [48.7, 2040.0], [48.8, 2041.0], [48.9, 2042.0], [49.0, 2043.0], [49.1, 2049.0], [49.2, 2052.0], [49.3, 2053.0], [49.4, 2053.0], [49.5, 2057.0], [49.6, 2060.0], [49.7, 2062.0], [49.8, 2062.0], [49.9, 2064.0], [50.0, 2067.0], [50.1, 2068.0], [50.2, 2070.0], [50.3, 2072.0], [50.4, 2073.0], [50.5, 2073.0], [50.6, 2078.0], [50.7, 2079.0], [50.8, 2081.0], [50.9, 2085.0], [51.0, 2086.0], [51.1, 2088.0], [51.2, 2089.0], [51.3, 2091.0], [51.4, 2093.0], [51.5, 2093.0], [51.6, 2095.0], [51.7, 2098.0], [51.8, 2099.0], [51.9, 2101.0], [52.0, 2104.0], [52.1, 2105.0], [52.2, 2108.0], [52.3, 2109.0], [52.4, 2113.0], [52.5, 2114.0], [52.6, 2115.0], [52.7, 2117.0], [52.8, 2117.0], [52.9, 2118.0], [53.0, 2119.0], [53.1, 2120.0], [53.2, 2122.0], [53.3, 2123.0], [53.4, 2124.0], [53.5, 2128.0], [53.6, 2129.0], [53.7, 2130.0], [53.8, 2132.0], [53.9, 2135.0], [54.0, 2137.0], [54.1, 2137.0], [54.2, 2139.0], [54.3, 2140.0], [54.4, 2141.0], [54.5, 2143.0], [54.6, 2144.0], [54.7, 2148.0], [54.8, 2151.0], [54.9, 2153.0], [55.0, 2155.0], [55.1, 2156.0], [55.2, 2161.0], [55.3, 2165.0], [55.4, 2166.0], [55.5, 2168.0], [55.6, 2170.0], [55.7, 2175.0], [55.8, 2177.0], [55.9, 2178.0], [56.0, 2182.0], [56.1, 2184.0], [56.2, 2184.0], [56.3, 2184.0], [56.4, 2188.0], [56.5, 2188.0], [56.6, 2191.0], [56.7, 2193.0], [56.8, 2195.0], [56.9, 2197.0], [57.0, 2198.0], [57.1, 2203.0], [57.2, 2204.0], [57.3, 2207.0], [57.4, 2207.0], [57.5, 2210.0], [57.6, 2211.0], [57.7, 2212.0], [57.8, 2213.0], [57.9, 2216.0], [58.0, 2217.0], [58.1, 2219.0], [58.2, 2221.0], [58.3, 2223.0], [58.4, 2224.0], [58.5, 2225.0], [58.6, 2228.0], [58.7, 2230.0], [58.8, 2232.0], [58.9, 2234.0], [59.0, 2239.0], [59.1, 2240.0], [59.2, 2241.0], [59.3, 2242.0], [59.4, 2245.0], [59.5, 2246.0], [59.6, 2247.0], [59.7, 2248.0], [59.8, 2252.0], [59.9, 2253.0], [60.0, 2254.0], [60.1, 2256.0], [60.2, 2257.0], [60.3, 2259.0], [60.4, 2260.0], [60.5, 2264.0], [60.6, 2264.0], [60.7, 2266.0], [60.8, 2267.0], [60.9, 2269.0], [61.0, 2271.0], [61.1, 2271.0], [61.2, 2272.0], [61.3, 2275.0], [61.4, 2278.0], [61.5, 2307.0], [61.6, 2307.0], [61.7, 2309.0], [61.8, 2312.0], [61.9, 2314.0], [62.0, 2315.0], [62.1, 2317.0], [62.2, 2317.0], [62.3, 2318.0], [62.4, 2321.0], [62.5, 2322.0], [62.6, 2323.0], [62.7, 2324.0], [62.8, 2327.0], [62.9, 2329.0], [63.0, 2330.0], [63.1, 2333.0], [63.2, 2335.0], [63.3, 2336.0], [63.4, 2337.0], [63.5, 2338.0], [63.6, 2340.0], [63.7, 2341.0], [63.8, 2341.0], [63.9, 2343.0], [64.0, 2346.0], [64.1, 2346.0], [64.2, 2347.0], [64.3, 2350.0], [64.4, 2351.0], [64.5, 2354.0], [64.6, 2355.0], [64.7, 2357.0], [64.8, 2357.0], [64.9, 2357.0], [65.0, 2359.0], [65.1, 2361.0], [65.2, 2362.0], [65.3, 2367.0], [65.4, 2369.0], [65.5, 2370.0], [65.6, 2372.0], [65.7, 2372.0], [65.8, 2373.0], [65.9, 2374.0], [66.0, 2376.0], [66.1, 2376.0], [66.2, 2377.0], [66.3, 2380.0], [66.4, 2383.0], [66.5, 2384.0], [66.6, 2385.0], [66.7, 2387.0], [66.8, 2389.0], [66.9, 2390.0], [67.0, 2391.0], [67.1, 2392.0], [67.2, 2393.0], [67.3, 2395.0], [67.4, 2395.0], [67.5, 2397.0], [67.6, 2397.0], [67.7, 2401.0], [67.8, 2402.0], [67.9, 2404.0], [68.0, 2406.0], [68.1, 2407.0], [68.2, 2408.0], [68.3, 2409.0], [68.4, 2412.0], [68.5, 2413.0], [68.6, 2416.0], [68.7, 2418.0], [68.8, 2419.0], [68.9, 2421.0], [69.0, 2424.0], [69.1, 2424.0], [69.2, 2425.0], [69.3, 2428.0], [69.4, 2431.0], [69.5, 2433.0], [69.6, 2434.0], [69.7, 2437.0], [69.8, 2438.0], [69.9, 2440.0], [70.0, 2440.0], [70.1, 2441.0], [70.2, 2441.0], [70.3, 2443.0], [70.4, 2445.0], [70.5, 2445.0], [70.6, 2446.0], [70.7, 2448.0], [70.8, 2449.0], [70.9, 2451.0], [71.0, 2455.0], [71.1, 2456.0], [71.2, 2458.0], [71.3, 2460.0], [71.4, 2463.0], [71.5, 2463.0], [71.6, 2466.0], [71.7, 2467.0], [71.8, 2471.0], [71.9, 2474.0], [72.0, 2477.0], [72.1, 2478.0], [72.2, 2479.0], [72.3, 2480.0], [72.4, 2481.0], [72.5, 2482.0], [72.6, 2485.0], [72.7, 2488.0], [72.8, 2490.0], [72.9, 2490.0], [73.0, 2494.0], [73.1, 2497.0], [73.2, 2499.0], [73.3, 2501.0], [73.4, 2503.0], [73.5, 2504.0], [73.6, 2508.0], [73.7, 2509.0], [73.8, 2510.0], [73.9, 2512.0], [74.0, 2514.0], [74.1, 2515.0], [74.2, 2517.0], [74.3, 2522.0], [74.4, 2523.0], [74.5, 2524.0], [74.6, 2525.0], [74.7, 2526.0], [74.8, 2529.0], [74.9, 2533.0], [75.0, 2535.0], [75.1, 2538.0], [75.2, 2540.0], [75.3, 2542.0], [75.4, 2545.0], [75.5, 2547.0], [75.6, 2549.0], [75.7, 2551.0], [75.8, 2551.0], [75.9, 2552.0], [76.0, 2554.0], [76.1, 2557.0], [76.2, 2558.0], [76.3, 2566.0], [76.4, 2567.0], [76.5, 2569.0], [76.6, 2572.0], [76.7, 2573.0], [76.8, 2574.0], [76.9, 2576.0], [77.0, 2576.0], [77.1, 2579.0], [77.2, 2580.0], [77.3, 2582.0], [77.4, 2585.0], [77.5, 2587.0], [77.6, 2589.0], [77.7, 2590.0], [77.8, 2592.0], [77.9, 2595.0], [78.0, 2597.0], [78.1, 2599.0], [78.2, 2600.0], [78.3, 2601.0], [78.4, 2602.0], [78.5, 2605.0], [78.6, 2607.0], [78.7, 2608.0], [78.8, 2609.0], [78.9, 2611.0], [79.0, 2613.0], [79.1, 2616.0], [79.2, 2616.0], [79.3, 2618.0], [79.4, 2618.0], [79.5, 2619.0], [79.6, 2622.0], [79.7, 2626.0], [79.8, 2626.0], [79.9, 2627.0], [80.0, 2628.0], [80.1, 2629.0], [80.2, 2630.0], [80.3, 2633.0], [80.4, 2635.0], [80.5, 2636.0], [80.6, 2637.0], [80.7, 2639.0], [80.8, 2640.0], [80.9, 2642.0], [81.0, 2646.0], [81.1, 2649.0], [81.2, 2656.0], [81.3, 2656.0], [81.4, 2658.0], [81.5, 2661.0], [81.6, 2663.0], [81.7, 2664.0], [81.8, 2669.0], [81.9, 2671.0], [82.0, 2672.0], [82.1, 2673.0], [82.2, 2674.0], [82.3, 2676.0], [82.4, 2678.0], [82.5, 2679.0], [82.6, 2681.0], [82.7, 2685.0], [82.8, 2686.0], [82.9, 2691.0], [83.0, 2691.0], [83.1, 2691.0], [83.2, 2695.0], [83.3, 2696.0], [83.4, 2698.0], [83.5, 2698.0], [83.6, 2701.0], [83.7, 2701.0], [83.8, 2703.0], [83.9, 2704.0], [84.0, 2706.0], [84.1, 2708.0], [84.2, 2710.0], [84.3, 2716.0], [84.4, 2717.0], [84.5, 2718.0], [84.6, 2720.0], [84.7, 2721.0], [84.8, 2734.0], [84.9, 2734.0], [85.0, 2736.0], [85.1, 2737.0], [85.2, 2739.0], [85.3, 2740.0], [85.4, 2742.0], [85.5, 2743.0], [85.6, 2747.0], [85.7, 2752.0], [85.8, 2754.0], [85.9, 2758.0], [86.0, 2758.0], [86.1, 2759.0], [86.2, 2760.0], [86.3, 2762.0], [86.4, 2763.0], [86.5, 2763.0], [86.6, 2764.0], [86.7, 2770.0], [86.8, 2771.0], [86.9, 2771.0], [87.0, 2773.0], [87.1, 2775.0], [87.2, 2778.0], [87.3, 2779.0], [87.4, 2779.0], [87.5, 2782.0], [87.6, 2784.0], [87.7, 2784.0], [87.8, 2788.0], [87.9, 2790.0], [88.0, 2793.0], [88.1, 2796.0], [88.2, 2796.0], [88.3, 2800.0], [88.4, 2801.0], [88.5, 2802.0], [88.6, 2805.0], [88.7, 2808.0], [88.8, 2809.0], [88.9, 2810.0], [89.0, 2812.0], [89.1, 2813.0], [89.2, 2814.0], [89.3, 2815.0], [89.4, 2816.0], [89.5, 2817.0], [89.6, 2817.0], [89.7, 2822.0], [89.8, 2825.0], [89.9, 2826.0], [90.0, 2830.0], [90.1, 2831.0], [90.2, 2833.0], [90.3, 2833.0], [90.4, 2836.0], [90.5, 2837.0], [90.6, 2838.0], [90.7, 2839.0], [90.8, 2840.0], [90.9, 2841.0], [91.0, 2842.0], [91.1, 2844.0], [91.2, 2844.0], [91.3, 2845.0], [91.4, 2847.0], [91.5, 2847.0], [91.6, 2848.0], [91.7, 2850.0], [91.8, 2851.0], [91.9, 2851.0], [92.0, 2852.0], [92.1, 2855.0], [92.2, 2856.0], [92.3, 2859.0], [92.4, 2860.0], [92.5, 2861.0], [92.6, 2862.0], [92.7, 2865.0], [92.8, 2865.0], [92.9, 2866.0], [93.0, 2868.0], [93.1, 2869.0], [93.2, 2870.0], [93.3, 2875.0], [93.4, 2876.0], [93.5, 2876.0], [93.6, 2876.0], [93.7, 2878.0], [93.8, 2879.0], [93.9, 2880.0], [94.0, 2881.0], [94.1, 2882.0], [94.2, 2883.0], [94.3, 2885.0], [94.4, 2886.0], [94.5, 2889.0], [94.6, 2890.0], [94.7, 2891.0], [94.8, 2891.0], [94.9, 2892.0], [95.0, 2894.0], [95.1, 2894.0], [95.2, 2895.0], [95.3, 2898.0], [95.4, 2899.0], [95.5, 2899.0], [95.6, 2902.0], [95.7, 2903.0], [95.8, 2905.0], [95.9, 2907.0], [96.0, 2909.0], [96.1, 2910.0], [96.2, 2910.0], [96.3, 2912.0], [96.4, 2915.0], [96.5, 2917.0], [96.6, 2918.0], [96.7, 2919.0], [96.8, 2919.0], [96.9, 2919.0], [97.0, 2920.0], [97.1, 2922.0], [97.2, 2923.0], [97.3, 2924.0], [97.4, 2924.0], [97.5, 2929.0], [97.6, 2929.0], [97.7, 2930.0], [97.8, 2932.0], [97.9, 2934.0], [98.0, 2936.0], [98.1, 2937.0], [98.2, 2938.0], [98.3, 2941.0], [98.4, 2943.0], [98.5, 2943.0], [98.6, 2945.0], [98.7, 2950.0], [98.8, 2951.0], [98.9, 2953.0], [99.0, 2956.0], [99.1, 2959.0], [99.2, 2962.0], [99.3, 2977.0], [99.4, 3023.0], [99.5, 3049.0], [99.6, 3051.0], [99.7, 3079.0], [99.8, 3098.0], [99.9, 3122.0]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 146.0, "series": [{"data": [[600.0, 47.0], [700.0, 34.0], [800.0, 34.0], [900.0, 48.0], [1000.0, 42.0], [1100.0, 32.0], [1200.0, 38.0], [1300.0, 35.0], [1400.0, 39.0], [1500.0, 69.0], [100.0, 1.0], [1600.0, 93.0], [1700.0, 74.0], [1800.0, 114.0], [1900.0, 118.0], [2000.0, 112.0], [2100.0, 104.0], [2200.0, 89.0], [2300.0, 123.0], [2400.0, 112.0], [2500.0, 99.0], [2600.0, 107.0], [2800.0, 146.0], [2700.0, 95.0], [2900.0, 75.0], [3000.0, 10.0], [3100.0, 2.0], [200.0, 12.0], [3200.0, 1.0], [300.0, 18.0], [400.0, 25.0], [500.0, 52.0]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "요청 수 \n(응답시간 <= 500ms)"], [1, "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)"], [2, "요청 수 \n(응답시간 > 1,500ms)"], [3, "오류 발생 요청"]], "maxY": 1950.0, "series": [{"data": [[0.0, 47.0]], "color": "#9ACD32", "isOverall": false, "label": "요청 수 \n(응답시간 <= 500ms)", "isController": false}, {"data": [[1.0, 3.0]], "color": "yellow", "isOverall": false, "label": "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "요청 수 \n(응답시간 > 1,500ms)", "isController": false}, {"data": [[3.0, 1950.0]], "color": "#FF6347", "isOverall": false, "label": "오류 발생 요청", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 806.119000000001, "minX": 1.70992938E12, "maxY": 806.119000000001, "series": [{"data": [[1.70992938E12, 806.119000000001]], "isOverall": false, "label": "쓰레드 그룹", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70992938E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.0, "maxY": 3098.0, "series": [{"data": [[4.0, 2953.0], [6.0, 2948.5], [8.0, 2944.0], [9.0, 2943.0], [13.0, 2986.5], [14.0, 2938.0], [15.0, 2977.0], [18.0, 2950.0], [19.0, 2929.0], [59.0, 3098.0], [58.0, 2931.0769230769233], [62.0, 2905.6666666666665], [67.0, 2895.0], [66.0, 2913.0], [65.0, 2910.6666666666665], [71.0, 2990.0], [69.0, 2904.5], [73.0, 2900.5], [79.0, 2902.6666666666665], [76.0, 2900.6666666666665], [83.0, 2912.5], [81.0, 2891.0], [80.0, 2897.0], [87.0, 2900.6666666666665], [84.0, 2885.0], [89.0, 3082.5], [94.0, 2889.0], [93.0, 2885.5], [99.0, 2953.0], [97.0, 2882.5], [101.0, 2883.5], [107.0, 2877.0], [106.0, 2882.0], [105.0, 2881.25], [111.0, 2876.0], [109.0, 2882.5], [113.0, 2875.5], [119.0, 2876.0], [118.0, 2882.0], [117.0, 2876.0], [116.0, 2875.6666666666665], [121.0, 2872.5], [127.0, 2866.0], [126.0, 2865.0], [125.0, 2868.0], [135.0, 2913.5], [131.0, 3053.0], [130.0, 2862.0], [129.0, 2868.0], [128.0, 2862.0], [143.0, 2851.5], [141.0, 2855.0], [140.0, 2861.0], [139.0, 2866.0], [138.0, 2862.5], [136.0, 2859.0], [150.0, 2856.0], [149.0, 2855.0], [148.0, 2873.5], [146.0, 2851.0], [145.0, 2851.0], [144.0, 3049.0], [159.0, 2848.0], [158.0, 2846.0], [156.0, 2848.25], [152.0, 2949.5], [166.0, 2841.0], [164.0, 2843.5], [162.0, 3037.0], [161.0, 2840.0], [160.0, 2844.0], [175.0, 2839.0], [174.0, 2837.0], [173.0, 3023.0], [172.0, 2836.0], [171.0, 2839.0], [170.0, 2833.0], [169.0, 2847.0], [168.0, 2841.0], [183.0, 2830.0], [181.0, 2839.0], [180.0, 2838.0], [179.0, 2835.5], [177.0, 2837.0], [176.0, 2846.0], [191.0, 2823.0], [190.0, 2844.0], [189.0, 2830.0], [188.0, 2833.0], [187.0, 2887.3333333333335], [184.0, 2825.0], [197.0, 2754.0], [194.0, 2821.5], [192.0, 2826.0], [207.0, 2810.0], [206.0, 2818.6666666666665], [203.0, 2817.0], [202.0, 2808.0], [201.0, 2813.0], [200.0, 2814.0], [209.0, 1509.0], [214.0, 2809.0], [213.0, 2813.0], [212.0, 2805.0], [211.0, 2811.0], [210.0, 2844.0], [208.0, 2833.0], [223.0, 2796.0], [221.0, 2796.6666666666665], [218.0, 2800.0], [217.0, 2801.0], [216.0, 2805.0], [230.0, 2159.0], [231.0, 2804.0], [227.0, 2794.0], [224.0, 2794.0], [233.0, 232.0], [239.0, 2779.5], [237.0, 2778.0], [236.0, 2782.0], [235.0, 2694.0], [234.0, 2787.0], [232.0, 2784.0], [240.0, 232.0], [245.0, 2147.25], [246.0, 2599.0], [242.0, 2788.0], [241.0, 2784.0], [251.0, 1510.0], [255.0, 2773.0], [254.0, 2763.0], [252.0, 2770.0], [250.0, 2775.0], [249.0, 2771.0], [248.0, 2778.0], [268.0, 2857.0], [256.0, 1514.5], [262.0, 1516.0], [269.0, 269.0], [271.0, 2763.0], [270.0, 2760.5], [259.0, 2771.0], [258.0, 2576.0], [257.0, 2759.0], [266.0, 2760.5], [264.0, 2760.0], [261.0, 2770.0], [260.0, 2773.0], [287.0, 2741.0], [275.0, 273.0], [274.0, 2759.0], [273.0, 2755.0], [272.0, 2951.0], [280.0, 115.0], [284.0, 1516.0], [286.0, 2643.5], [283.0, 2747.0], [282.0, 2754.0], [281.0, 2758.5], [277.0, 2572.0], [276.0, 2847.5], [302.0, 2737.0], [289.0, 287.0], [295.0, 300.0], [288.0, 2739.0], [294.0, 2740.0], [293.0, 2743.0], [292.0, 2838.5], [303.0, 2731.0], [301.0, 2734.0], [300.0, 2734.0], [290.0, 2744.5], [298.0, 2737.0], [297.0, 2737.0], [296.0, 2736.0], [306.0, 2721.0], [318.0, 320.0], [305.0, 1513.0], [304.0, 2719.0], [314.0, 312.0], [313.0, 2717.0], [312.0, 2718.5], [310.0, 2720.0], [309.0, 2717.5], [307.0, 2904.0], [323.0, 326.0], [330.0, 328.0], [335.0, 330.0], [349.0, 2696.0], [351.0, 2679.0], [341.0, 1516.5], [340.0, 2497.0], [345.0, 1905.6666666666667], [350.0, 2523.0], [348.0, 2691.0], [339.0, 2783.0], [337.0, 2690.041666666667], [347.0, 2685.0], [346.0, 2686.0], [343.0, 2693.0], [366.0, 2673.5], [352.0, 1517.5], [356.0, 358.0], [360.0, 364.0], [363.0, 2398.5555555555557], [367.0, 2672.0], [364.0, 2674.0], [355.0, 2673.0], [354.0, 2678.0], [353.0, 2680.0], [382.0, 2656.0], [369.0, 1516.0], [374.0, 1614.5], [373.0, 2668.0], [372.0, 2674.0], [375.0, 2464.0], [368.0, 2664.0], [381.0, 1898.6666666666667], [383.0, 2656.0], [380.0, 2660.0], [370.0, 2672.0], [378.0, 2663.0], [377.0, 2661.0], [376.0, 2850.0], [397.0, 1887.6666666666667], [391.0, 391.0], [385.0, 2650.5], [398.0, 2639.0], [395.0, 2640.0], [394.0, 2637.0], [392.0, 2643.0], [389.0, 2649.0], [388.0, 2833.0], [387.0, 2656.0], [386.0, 2662.0], [413.0, 2689.0], [415.0, 2626.0], [403.0, 1517.5], [402.0, 2629.0], [401.0, 2636.0], [400.0, 2638.5], [410.0, 1519.5], [414.0, 2626.0], [409.0, 2624.0], [408.0, 2629.0], [407.0, 2629.5], [405.0, 2637.0], [404.0, 2636.0], [429.0, 2605.0], [417.0, 1520.5], [430.0, 427.0], [428.0, 2613.0], [419.0, 2619.0], [418.0, 2622.0], [427.0, 2616.0], [426.0, 2617.0], [424.0, 2615.0], [422.0, 2618.0], [416.0, 2627.0], [421.0, 2616.0], [420.0, 2619.0], [434.0, 430.0], [438.0, 1517.0], [437.0, 2605.0], [436.0, 2606.3333333333335], [443.0, 1880.6666666666667], [447.0, 2595.0], [446.0, 2601.0], [445.0, 2599.0], [444.0, 2597.0], [441.0, 2600.5], [439.0, 2608.0], [433.0, 2609.75], [448.0, 1515.0], [454.0, 459.0], [453.0, 2406.0], [452.0, 2587.0], [456.0, 1519.5], [462.0, 1520.0], [461.0, 2393.0], [460.0, 2488.5], [451.0, 2592.6666666666665], [458.0, 2588.0], [457.0, 2589.0], [455.0, 2588.0], [478.0, 2562.0], [466.0, 2052.25], [465.0, 2392.0], [467.0, 2580.0], [468.0, 1519.0], [469.0, 1524.5], [473.0, 465.0], [472.0, 474.0], [479.0, 477.0], [477.0, 2571.1428571428573], [476.0, 2567.0], [493.0, 490.0], [481.0, 477.0], [482.0, 1864.3333333333333], [484.0, 1516.0], [485.0, 491.0], [487.0, 2548.0], [480.0, 2462.5], [486.0, 2552.0], [494.0, 2540.0], [488.0, 2554.0], [492.0, 2536.0], [483.0, 2551.0], [491.0, 2350.0], [490.0, 2545.0], [509.0, 2524.0], [502.0, 1518.0], [507.0, 1860.0], [511.0, 2524.0], [510.0, 2522.0], [508.0, 2557.0], [498.0, 2542.0], [497.0, 2536.0], [505.0, 2464.3333333333335], [501.0, 2526.0], [500.0, 2540.0], [539.0, 1516.0], [515.0, 2020.25], [518.0, 1514.0], [517.0, 2894.0], [516.0, 2517.0], [536.0, 2515.0], [522.0, 531.5], [521.0, 2511.0], [520.0, 2507.5], [527.0, 2510.25], [513.0, 2514.0], [523.0, 2512.5], [535.0, 1514.75], [533.0, 2501.0], [531.0, 2508.0], [530.0, 2509.0], [529.0, 2505.0], [528.0, 2504.0], [543.0, 2485.0], [541.0, 2486.0], [540.0, 2499.0], [538.0, 2492.0], [537.0, 2501.0], [549.0, 1514.0], [546.0, 1188.6666666666665], [548.0, 2489.0], [550.0, 1514.5], [551.0, 2479.0], [568.0, 576.0], [574.0, 578.5], [573.0, 572.3333333333334], [572.0, 577.0], [555.0, 1515.5], [554.0, 2479.6666666666665], [557.0, 540.5], [556.0, 548.0], [558.0, 1708.4], [545.0, 2487.5], [565.0, 558.0], [566.0, 556.0], [591.0, 589.0], [577.0, 569.0], [579.0, 582.0], [581.0, 582.0], [600.0, 2439.0], [602.0, 2246.0], [601.0, 2440.0], [604.0, 600.0], [607.0, 898.2], [594.0, 2446.0555555555557], [606.0, 2070.4], [584.0, 552.0], [588.0, 589.0], [589.0, 595.0], [590.0, 587.0], [595.0, 593.0], [597.0, 1488.1666666666665], [599.0, 2440.0], [598.0, 2441.0], [633.0, 1808.6666666666667], [612.0, 605.0], [610.0, 1207.6666666666665], [611.0, 2432.0], [623.0, 2420.0], [609.0, 2434.0], [608.0, 2433.0], [613.0, 1810.0], [614.0, 2428.0], [639.0, 2406.0], [638.0, 2406.5], [637.0, 2409.0], [635.0, 2413.0], [634.0, 2408.0], [621.0, 1516.5], [620.0, 2425.0], [619.0, 2424.0], [618.0, 2425.0], [617.0, 2618.0], [622.0, 618.0], [625.0, 602.6666666666666], [624.0, 624.5], [626.0, 2015.25], [627.0, 1526.0], [629.0, 2416.0], [628.0, 2417.0], [631.0, 2410.0], [630.0, 2413.0], [642.0, 645.3333333333334], [641.0, 1816.0], [644.0, 1229.3333333333335], [643.0, 2402.0], [645.0, 1507.0], [648.0, 648.0], [649.0, 2397.6666666666665], [650.0, 1522.5], [653.0, 1959.25], [655.0, 2393.5], [657.0, 656.5], [669.0, 1361.6], [667.0, 2475.5], [665.0, 2447.6666666666665], [646.0, 2397.0], [671.0, 2475.0], [663.0, 671.2], [662.0, 2386.0], [659.0, 2435.75], [678.0, 1701.0], [676.0, 675.0], [673.0, 674.5], [672.0, 2380.0], [675.0, 2380.0], [674.0, 2376.5], [690.0, 1267.3333333333335], [689.0, 2370.0], [688.0, 2369.6666666666665], [703.0, 1187.6666666666667], [702.0, 2355.0], [701.0, 2358.0], [700.0, 2357.0], [699.0, 2358.0], [696.0, 2363.0], [679.0, 2377.0], [686.0, 714.0], [681.0, 1526.0], [680.0, 2372.0], [682.0, 2375.0], [685.0, 2373.0], [684.0, 2370.5], [677.0, 705.0], [691.0, 1527.5], [692.0, 503.0], [693.0, 692.0], [695.0, 1246.6666666666665], [694.0, 1943.5], [709.0, 1253.0], [705.0, 1268.0], [704.0, 1533.0], [708.0, 1795.3333333333333], [706.0, 2357.0], [710.0, 1434.0], [711.0, 712.0], [717.0, 1325.4], [715.0, 2530.0], [714.0, 2346.0], [713.0, 2350.6666666666665], [718.0, 2341.0], [719.0, 1199.3333333333335], [721.0, 1262.0], [731.0, 730.0], [732.0, 1533.0], [735.0, 2423.5], [720.0, 2343.0], [733.0, 2333.5], [730.0, 1531.5], [729.0, 2335.0], [728.0, 2336.3333333333335], [727.0, 725.3333333333334], [725.0, 2338.0], [723.0, 2339.5], [742.0, 555.0], [740.0, 739.0], [736.0, 1614.0], [739.0, 2329.0], [738.0, 2327.0], [751.0, 2316.6666666666665], [741.0, 1794.0], [747.0, 748.0], [745.0, 2323.5], [748.0, 2319.0], [749.0, 780.0], [761.0, 1792.0], [743.0, 2325.5], [763.0, 2309.0], [766.0, 2275.0], [753.0, 2317.0], [752.0, 2315.0], [756.0, 2312.0], [755.0, 2316.5], [759.0, 2309.0], [758.0, 2313.5], [765.0, 2401.0], [797.0, 1538.0], [769.0, 1515.5], [768.0, 2275.5], [783.0, 2166.5], [781.0, 2264.0], [780.0, 2264.0], [779.0, 2264.0], [778.0, 2266.0], [777.0, 2267.0], [776.0, 2269.0], [770.0, 1520.0], [786.0, 1045.8], [785.0, 2260.0], [788.0, 2255.0], [787.0, 2260.0], [791.0, 2256.0], [790.0, 2256.5], [799.0, 2247.0], [798.0, 2252.0], [796.0, 2248.0], [795.0, 2443.0], [794.0, 2441.0], [793.0, 2253.5], [775.0, 2272.0], [774.0, 2269.25], [818.0, 2228.0], [813.0, 1348.3333333333335], [811.0, 2053.0], [810.0, 2241.0], [809.0, 2240.0], [820.0, 1528.0], [823.0, 828.5], [831.0, 835.0], [819.0, 2232.0], [817.0, 2228.0], [816.0, 2232.0], [815.0, 2238.0], [803.0, 2244.6666666666665], [800.0, 2252.0], [807.0, 2055.0], [806.0, 2244.6666666666665], [814.0, 2239.0], [834.0, 835.0], [832.0, 830.0], [839.0, 836.0], [858.0, 2138.675], [859.0, 1527.5], [860.0, 2195.0], [863.0, 2098.5], [862.0, 2197.0], [841.0, 860.0], [844.0, 849.0], [846.0, 848.0], [851.0, 852.0], [854.0, 854.5], [855.0, 856.0], [871.0, 2184.0], [891.0, 699.0], [873.0, 1528.0], [874.0, 1431.5], [881.0, 1529.0], [880.0, 2178.0], [882.0, 1527.5], [884.0, 1314.0], [883.0, 1988.0], [885.0, 2175.0], [887.0, 2357.0], [886.0, 2170.0], [888.0, 1376.3333333333333], [870.0, 2185.0], [869.0, 2188.0], [868.0, 2188.0], [867.0, 2189.0], [866.0, 2192.0], [865.0, 2282.0], [879.0, 2177.0], [878.0, 2182.0], [877.0, 2183.0], [876.0, 2182.0], [875.0, 2184.0], [890.0, 1977.0], [889.0, 2166.0], [895.0, 1379.6666666666667], [894.0, 2166.0], [893.0, 2165.6666666666665], [901.0, 900.0], [898.0, 898.0], [896.0, 2161.0], [900.0, 1966.0], [899.0, 2219.3333333333335], [902.0, 1673.6666666666667], [903.0, 2155.0], [921.0, 1949.0], [920.0, 2140.0], [925.0, 2136.0], [923.0, 2137.0], [906.0, 1623.0], [905.0, 2150.5], [907.0, 2151.0], [908.0, 906.5], [911.0, 911.0], [910.0, 2144.0], [909.0, 2146.0], [914.0, 916.0], [919.0, 1324.6666666666667], [918.0, 2137.5], [916.0, 2143.0], [915.0, 2143.0], [926.0, 1529.5], [927.0, 1528.5], [912.0, 2146.0], [957.0, 1532.0], [929.0, 1527.5], [928.0, 1530.0], [943.0, 2118.3333333333335], [931.0, 929.5], [930.0, 2127.0], [932.0, 2127.0], [935.0, 2128.0], [934.0, 2125.0], [954.0, 2114.0], [953.0, 2109.0], [956.0, 2108.0], [955.0, 1922.0], [940.0, 1332.6666666666667], [939.0, 2123.0], [938.0, 2118.5], [936.0, 2120.0], [942.0, 938.0], [945.0, 945.0], [950.0, 1337.0], [949.0, 2113.0], [948.0, 2116.0], [946.0, 2117.3333333333335], [951.0, 1338.3333333333333], [958.0, 1529.5], [959.0, 2105.0], [962.0, 962.0], [964.0, 1532.5], [963.0, 2100.0], [965.0, 2098.0], [986.0, 2018.0], [966.0, 2100.0], [988.0, 1714.6666666666667], [991.0, 991.0], [990.0, 2266.0], [989.0, 2078.0], [969.0, 1812.5], [970.0, 1532.0], [971.0, 1343.3333333333333], [972.0, 2093.0], [974.0, 1532.25], [975.0, 2088.0], [961.0, 2099.0], [960.0, 2104.0], [976.0, 1529.5], [980.0, 1531.5], [979.0, 2088.0], [981.0, 1531.0], [983.0, 1989.0], [1020.0, 1535.5], [994.0, 1531.5000000000002], [999.0, 1293.0], [998.0, 2071.0], [997.0, 2071.6666666666665], [1003.0, 1002.0], [1002.0, 2064.0], [1001.0, 2067.0], [1000.0, 1883.0], [1007.0, 1774.6666666666667], [1005.0, 2064.6666666666665], [1022.0, 2237.0], [1015.0, 2148.5], [1013.0, 1991.3333333333333], [1010.0, 2060.0], [1009.0, 2062.0], [1008.0, 2063.0], [1021.0, 2046.0], [1019.0, 2052.0], [1018.0, 2055.6666666666665], [1030.0, 1364.0], [1074.0, 1316.3333333333333], [1024.0, 1766.0], [1044.0, 2030.3333333333333], [1050.0, 1840.0], [1040.0, 1539.0], [1028.0, 1029.0], [1032.0, 1028.0], [1076.0, 1061.0], [1082.0, 1691.6666666666667], [1086.0, 1802.0], [1084.0, 1807.0], [1080.0, 1387.3333333333333], [1060.0, 2016.0], [1056.0, 1778.75], [1070.0, 2009.0], [1062.0, 2016.0], [1136.0, 1960.0], [1092.0, 1540.5], [1090.0, 1992.0], [1100.0, 1087.0], [1138.0, 1957.5], [1142.0, 1952.0], [1144.0, 1950.5], [1146.0, 1099.0], [1150.0, 1947.0], [1128.0, 1123.5], [1134.0, 1958.0], [1104.0, 1094.0], [1116.0, 1121.0], [1202.0, 1888.0], [1174.0, 1547.25], [1158.0, 1416.6666666666667], [1154.0, 1941.0], [1152.0, 2129.0], [1200.0, 1699.0], [1166.0, 2024.0], [1164.0, 2026.5], [1162.0, 1928.0], [1160.0, 1935.0], [1208.0, 1881.0], [1212.0, 1431.3333333333333], [1214.0, 1636.5], [1168.0, 1405.0], [1170.0, 1924.0], [1172.0, 1923.0], [1180.0, 1547.0], [1178.0, 1917.5], [1176.0, 1918.0], [1182.0, 1545.5], [1184.0, 1089.5], [1186.0, 1640.5], [1188.0, 1906.0], [1190.0, 1542.5], [1192.0, 1193.0], [1194.0, 1450.5], [1196.0, 1544.5], [1198.0, 1896.0], [1224.0, 1552.3333333333333], [1272.0, 1409.25], [1220.0, 1218.5], [1218.0, 1875.0], [1246.0, 2032.0], [1222.0, 1865.0], [1236.0, 1648.0], [1234.0, 2038.0], [1240.0, 1943.0], [1238.0, 1851.0], [1244.0, 1944.5], [1242.0, 1848.5], [1250.0, 1497.5], [1248.0, 1847.0], [1252.0, 1843.0], [1254.0, 1838.0], [1258.0, 1833.5], [1256.0, 1837.0], [1276.0, 1822.0], [1278.0, 1819.0], [1274.0, 1638.3333333333333], [1264.0, 1261.0], [1228.0, 1863.0], [1226.0, 1864.0], [1266.0, 1832.0], [1268.0, 1827.5], [1260.0, 1425.0], [1262.0, 1822.0], [1286.0, 1549.5], [1284.0, 1654.5], [1306.0, 1796.0], [1310.0, 1790.0], [1308.0, 1792.5], [1288.0, 1811.0], [1292.0, 1804.0], [1314.0, 1311.0], [1312.0, 1788.0], [1338.0, 1545.5], [1340.0, 1489.3333333333333], [1334.0, 1142.0], [1332.0, 1759.0], [1330.0, 1762.5], [1328.0, 1764.0], [1336.0, 1640.5], [1316.0, 1452.5], [1318.0, 1433.25], [1324.0, 1683.6666666666667], [1322.0, 1768.0], [1320.0, 1782.0], [1326.0, 1471.6666666666667], [1296.0, 1801.0], [1298.0, 1802.0], [1300.0, 1550.0], [1304.0, 1303.0], [1302.0, 1799.0], [1400.0, 1399.0], [1348.0, 1547.5], [1352.0, 1741.0], [1354.0, 1552.0], [1344.0, 1751.0], [1346.0, 1751.0], [1382.0, 1536.5], [1388.0, 1591.25], [1386.0, 1693.0], [1384.0, 1696.0], [1396.0, 1631.5], [1394.0, 1685.0], [1398.0, 1772.5], [1376.0, 1704.5238095238096], [1378.0, 1704.0], [1406.0, 1441.5], [1404.0, 1673.0], [1456.0, 1532.5], [1466.0, 1508.3333333333333], [1460.0, 1461.0], [1458.0, 1618.0], [1462.0, 1537.5], [1420.0, 1646.0], [1416.0, 1656.0], [1414.0, 1754.0], [1412.0, 1724.0], [1452.0, 1438.0], [1446.0, 1635.0], [1444.0, 1582.25], [1440.0, 1634.5], [1470.0, 1613.0], [1468.0, 1611.5], [1436.0, 1643.0], [1434.0, 1549.0], [1432.0, 1646.0], [1426.0, 1534.5], [1424.0, 1651.0], [1428.0, 1645.0], [1524.0, 1543.5], [1530.0, 1536.6666666666667], [1472.0, 1469.8], [1478.0, 1603.5], [1476.0, 1607.0], [1482.0, 1600.0], [1484.0, 1602.0], [1502.0, 1585.0], [1486.0, 1598.0], [1520.0, 1568.0], [1522.0, 1520.0], [1526.0, 1564.0], [1528.0, 1562.0], [1504.0, 1582.0], [1506.0, 1581.0], [1534.0, 1494.6666666666667], [1490.0, 1595.0], [1494.0, 1543.0], [1496.0, 1590.0], [1500.0, 1498.5], [1508.0, 1506.0], [1514.0, 1543.5], [1512.0, 1573.0], [1516.0, 1573.0], [1518.0, 1544.5], [1536.0, 1546.0], [1540.0, 1453.5], [1538.0, 1548.0], [1031.0, 1532.0], [1025.0, 1363.3333333333333], [1053.0, 1474.4], [1047.0, 1829.25], [1049.0, 2029.0], [1051.0, 2027.0], [1043.0, 1040.5], [1041.0, 2033.0], [1027.0, 2047.0], [1029.0, 2039.5], [1033.0, 1764.6666666666667], [1035.0, 2039.0], [1073.0, 1631.2], [1039.0, 2037.5], [1079.0, 1997.0], [1077.0, 1937.6666666666667], [1081.0, 1079.0], [1087.0, 1994.0], [1085.0, 1997.0], [1083.0, 1997.0], [1057.0, 863.0], [1059.0, 2020.0], [1069.0, 1534.5], [1065.0, 1697.6666666666667], [1063.0, 2015.0], [1067.0, 2008.5], [1061.0, 1532.5], [1095.0, 1094.0], [1141.0, 1953.5], [1089.0, 1688.3333333333333], [1091.0, 1989.0], [1093.0, 1984.0], [1101.0, 1096.5], [1139.0, 1954.0], [1145.0, 2137.0], [1151.0, 1547.0], [1149.0, 1949.5], [1147.0, 1948.5], [1133.0, 1683.3333333333333], [1131.0, 1960.0], [1129.0, 1973.0], [1135.0, 1544.0], [1113.0, 1106.0], [1115.0, 1108.0], [1167.0, 1930.0], [1201.0, 1545.0], [1183.0, 1907.0], [1157.0, 1939.0], [1155.0, 1941.0], [1161.0, 1936.0], [1159.0, 1938.0], [1203.0, 1429.6666666666667], [1207.0, 1881.0], [1205.0, 1888.0], [1209.0, 1878.0], [1213.0, 1683.0], [1211.0, 1588.3333333333333], [1169.0, 1545.0], [1171.0, 1551.5], [1179.0, 1729.0], [1175.0, 1918.0], [1181.0, 1908.0], [1185.0, 2000.0], [1187.0, 1905.0], [1191.0, 1900.0], [1193.0, 1899.5], [1195.0, 1896.0], [1199.0, 1639.5], [1189.0, 1450.0], [1223.0, 1865.0], [1217.0, 1753.5], [1219.0, 1867.0], [1221.0, 1588.3333333333333], [1235.0, 1234.0], [1233.0, 1858.5], [1241.0, 1143.5], [1237.0, 1854.0], [1245.0, 1382.0], [1251.0, 1837.0], [1253.0, 1840.0], [1255.0, 1838.0], [1275.0, 1274.0], [1277.0, 1818.0], [1273.0, 1270.0], [1231.0, 1947.5], [1229.0, 1672.0], [1227.0, 1863.0], [1265.0, 1828.0], [1271.0, 1824.3333333333333], [1259.0, 1512.0], [1261.0, 1826.5], [1283.0, 1280.0], [1293.0, 1462.3333333333333], [1305.0, 1626.75], [1281.0, 1816.0], [1307.0, 1307.0], [1311.0, 1789.0], [1285.0, 1814.3333333333333], [1289.0, 1809.0], [1291.0, 1805.0], [1315.0, 1850.3333333333333], [1343.0, 1682.0], [1341.0, 1751.0], [1337.0, 1757.0], [1295.0, 1802.5], [1335.0, 1698.3333333333333], [1317.0, 1548.5], [1321.0, 1769.0], [1327.0, 1764.0], [1325.0, 1546.5], [1297.0, 1294.0], [1301.0, 1465.3333333333333], [1299.0, 1549.5], [1393.0, 1780.5], [1359.0, 1547.0], [1347.0, 1644.0], [1351.0, 1501.25], [1349.0, 1744.0], [1353.0, 1931.0], [1355.0, 1739.0], [1371.0, 1370.0], [1345.0, 1752.0], [1385.0, 1696.0], [1383.0, 1696.0], [1391.0, 1684.5], [1389.0, 1689.0], [1395.0, 1683.0], [1399.0, 1676.0], [1407.0, 1441.5], [1377.0, 1704.0], [1381.0, 1696.0], [1379.0, 1697.0], [1405.0, 1672.0], [1403.0, 1674.5], [1401.0, 1583.0], [1423.0, 1746.5], [1459.0, 1617.0], [1457.0, 1618.0], [1461.0, 1615.0], [1463.0, 1535.0], [1465.0, 1612.5], [1415.0, 1535.0], [1421.0, 1465.0], [1419.0, 1556.5], [1417.0, 1650.0], [1439.0, 1632.0], [1409.0, 1662.5], [1455.0, 1588.4], [1447.0, 1534.5], [1445.0, 1631.0], [1451.0, 1673.25], [1441.0, 1531.5], [1471.0, 1610.0], [1469.0, 1612.0], [1437.0, 1436.6666666666667], [1429.0, 1425.0], [1435.0, 1642.0], [1431.0, 1581.0], [1425.0, 1652.0], [1427.0, 1454.0], [1483.0, 1600.0], [1485.0, 1540.0], [1475.0, 1702.5], [1473.0, 1608.0], [1481.0, 1664.0], [1503.0, 1584.0], [1501.0, 1492.5], [1487.0, 1486.0], [1521.0, 1566.0], [1523.0, 1565.0], [1525.0, 1938.0], [1527.0, 1561.0], [1529.0, 1559.0], [1535.0, 1626.0], [1505.0, 1580.0], [1507.0, 1578.0], [1531.0, 1370.0], [1489.0, 1567.75], [1491.0, 1541.5], [1493.0, 1593.5], [1495.0, 1779.0], [1499.0, 1586.5], [1497.0, 1584.0], [1513.0, 1386.0], [1511.0, 1575.0], [1509.0, 1577.0], [1515.0, 1572.0], [1517.0, 1570.0], [1519.0, 1569.0], [1541.0, 1538.6666666666667], [1537.0, 1549.0], [1.0, 2969.0]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}, {"data": [[806.119000000001, 1966.6460000000004]], "isOverall": false, "label": "HTTP 요청_선착순 구매-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1541.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15467.333333333334, "minX": 1.70992938E12, "maxY": 16566.666666666668, "series": [{"data": [[1.70992938E12, 15467.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70992938E12, 16566.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70992938E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1966.6460000000004, "minX": 1.70992938E12, "maxY": 1966.6460000000004, "series": [{"data": [[1.70992938E12, 1966.6460000000004]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70992938E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1966.6349999999989, "minX": 1.70992938E12, "maxY": 1966.6349999999989, "series": [{"data": [[1.70992938E12, 1966.6349999999989]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70992938E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0700000000000007, "minX": 1.70992938E12, "maxY": 1.0700000000000007, "series": [{"data": [[1.70992938E12, 1.0700000000000007]], "isOverall": false, "label": "HTTP 요청_선착순 구매", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70992938E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.70992938E12, "maxY": 535.0, "series": [{"data": [[1.70992938E12, 535.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70992938E12, 487.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70992938E12, 535.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70992938E12, 512.8499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70992938E12, 115.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70992938E12, 363.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70992938E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 277.5, "minX": 22.0, "maxY": 2848.0, "series": [{"data": [[276.0, 431.5], [22.0, 277.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 1980.5], [512.0, 2449.5], [276.0, 726.0], [327.0, 2848.0], [343.0, 1537.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 277.5, "minX": 22.0, "maxY": 2848.0, "series": [{"data": [[276.0, 431.5], [22.0, 277.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 1980.5], [512.0, 2449.5], [276.0, 726.0], [327.0, 2848.0], [343.0, 1537.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.70992938E12, "maxY": 33.333333333333336, "series": [{"data": [[1.70992938E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70992938E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.70992938E12, "maxY": 32.5, "series": [{"data": [[1.70992938E12, 0.8333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70992938E12, 32.5]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70992938E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.70992938E12, "maxY": 32.5, "series": [{"data": [[1.70992938E12, 32.5]], "isOverall": false, "label": "HTTP 요청_선착순 구매-failure", "isController": false}, {"data": [[1.70992938E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP 요청_선착순 구매-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70992938E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.70992938E12, "maxY": 32.5, "series": [{"data": [[1.70992938E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70992938E12, 32.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70992938E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

